#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <signal.h>
#include <unistd.h>
#include <sys/wait.h>
#include <sys/types.h>

#include "main.h"
#include "utils.h"
#include "bruteforce.h"


int main(int argc, char* argv[])
{
    // Process Commandline arguments
    if(argc != 5 || !strcmp("-h", argv[1]) || !strcmp("--help", argv[1]))
    {
        printf("\nUsage: %s <sha256 hash> <process count> <min> <max>\n\n", argv[0]);
        printf("\t\t<sha256 hash>  \t = 64 character long hex character sequence\n");
        printf("\t\t<process count>\t = Number of processes to split workload to\n");
        printf("\t\t<min>          \t = lowest number of cleartext length\n");
        printf("\t\t<max>          \t = highest number of cleartext length\n\n");
        return 0;
    }
    process_count = atoi(argv[2]);
    min_password_length = atoi(argv[3]);
    max_password_length = atoi(argv[4]);

	/* CRACK THE FOLLOWING SHA256 HASH:

		fab6b3381ec4dc44084b23206f3a1e7ea3b2fb795a0e5e01e42f6cff11d4c175

	*/

    /* HIER KÃ–NNTE IHRE IMPLEMENTIERUNG STEHEN */

	if(process_count>25)
	{
		process_count=25;
	}
	printf("the number of process=%d\n",process_count);	
	pid_t* processIds=malloc(sizeof(pid_t)*process_count);
	char** work=malloc(sizeof(char*)*(process_count+1));
	split_work(work,26/process_count);
	char* cleartext;
	for(int i=0;i<process_count;i++)
	{
		pid_t child_pid=fork();
		if (child_pid == 0) 
		{ 
			/* this code is only executed in the child process */ 
			processIds[i]=getpid();
			printf("Started process: %s--%s:!\n",work[i],work[i+1]);
			char* result= brute(argv[1],work[i],work[i+1]);
			if(result!=NULL)
			{
				cleartext=result;
				printf("cleartext: %s\n",cleartext);
				printf("In the scope: %s--%s: GEFUNDEN!\n",work[i],work[i+1]);				
				for(int j=0;j<process_count;j++)
				{
					if(getpid()!=processIds[j])
						kill(processIds[j],SIGKILL);//kill another process
				}
				
			}
			exit(1);//end process
		}
		else if (child_pid > 0) 
		{
			processIds[i]=child_pid;			
		}
	  
	}
	for (int i = 0; i < process_count; i++) {
	    while (waitpid(processIds[i], NULL, 0) > 0);
	}// wait for all childprocess to finish
	free(processIds);	
	free_work_data(work,argv[1]);
}
